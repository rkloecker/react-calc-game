{"version":3,"sources":["components/Card.js","components/Main.js","components/Gamesize.js","components/Header.js","components/Gametype.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","_this","props","evalCards","card","_this$props","this","size","react_default","a","createElement","className","style","flex","concat","maxWidth","onClick","backgroundColor","text","Component","Main","_ref","cards","width","height","map","el","i","Card_Card","key","id","GameSize","e","setSize","target","value","Header","Gametype","setAlgo","bind","shuffle","length","j","Math","floor","random","randomNumber","minimum","maximum","algo","square","max","num1","val","cube","eins","num2","bindec","toString","hexdec","sqroot","sqrt","toFixed","App","state","firstClicked","secondClicked","cnt","gameSize","initCards","Array","fill","cardsFlipped","Object","toConsumableArray","index","setState","isEqual","removeCard","newCards","algoStr","Gamesize_GameSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b28b328c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Card extends Component {\r\n  handleClick = () => {\r\n    this.props.evalCards(this.props.card);\r\n  };\r\n  render() {\r\n    const { card, size } = this.props;\r\n    return (\r\n      <div\r\n        className=\"mt-2 \"\r\n        style={{ flex: `0 0 ${100 / size}%`, maxWidth: `${100 / size}%` }}\r\n      >\r\n        <div\r\n          onClick={this.handleClick}\r\n          style={{ backgroundColor: `${card.text}` }}\r\n          className=\"card-style text-center \"\r\n        >\r\n          {card.text}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default ({ cards, evalCards, size }) => {\r\n  return (\r\n    <div\r\n      className=\"wrapper\"\r\n      style={{ width: `${size * 100}px`, height: `${size * 100 + 6 * size}px` }}\r\n    >\r\n      <div className=\"row\">\r\n        {cards.map((el, i) => {\r\n          return (\r\n            <Card evalCards={evalCards} key={el.id} card={el} size={size} />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class GameSize extends Component {\r\n  handleClick = e => {\r\n    this.props.setSize(e.target.value);\r\n  };\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand py-3 navstyle\">\r\n        <ul className=\"navbar-nav mx-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <h2>choose size</h2>\r\n          </li>\r\n          <li className=\"nav-item mr-2\">\r\n            <button\r\n              value=\"4\"\r\n              onClick={this.handleClick}\r\n              className=\"btn btn-success\"\r\n            >\r\n              4 x 4\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item mr-2\">\r\n            <button\r\n              onClick={this.handleClick}\r\n              className=\"btn btn-danger\"\r\n              value=\"6\"\r\n            >\r\n              6 x 6\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item mr-2\">\r\n            <button\r\n              value=\"8\"\r\n              onClick={this.handleClick}\r\n              className=\"btn btn-info\"\r\n            >\r\n              8 x 8\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default () => (\r\n  <nav className=\"navbar navbar-expand py-2 navstyle\">\r\n    <ul className=\"navbar-nav mx-auto\">\r\n      <li className=\"nav-item mr-4\">\r\n        <h2>Calculate!</h2>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n","import React from \"react\";\r\n\r\nexport default props => (\r\n  <nav className=\"navbar navbar-expand py-2 navstyle\">\r\n    <ul className=\"navbar-nav mx-auto\">\r\n      <li className=\"nav-item mr-4\">\r\n        <h2>choose type</h2>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setAlgo.bind(this, \"square\")}\r\n          className=\"btn btn-success\"\r\n        >\r\n          Square\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setAlgo.bind(this, \"cube\")}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Cube\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setAlgo.bind(this, \"hexdec\")}\r\n          className=\"btn btn-info\"\r\n        >\r\n          Bin-Hex\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setAlgo.bind(this, \"bindec\")}\r\n          className=\"btn btn-warning\"\r\n        >\r\n          Bin-Dec\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setAlgo.bind(this, \"eins\")}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Multiply\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n","const shuffle = a => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n};\r\n\r\nconst randomNumber = (minimum, maximum) => {\r\n  return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n};\r\n\r\nconst square = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let text = `${num1} x ${num1}`;\r\n  let val = num1 * num1;\r\n  return { val, text };\r\n};\r\nconst cube = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let text = `${num1} x ${num1} x ${num1}`;\r\n  let val = num1 * num1 * num1;\r\n  return { val, text };\r\n};\r\nconst sqroot = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let val = Math.sqrt(num1);\r\n  val = val.toFixed(2);\r\n  let text = `${num1}`;\r\n  return { val, text };\r\n};\r\nconst eins = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let num2 = randomNumber(2, max);\r\n  let text = `${num1} x ${num2}`;\r\n  let val = num1 * num2;\r\n  return { val, text };\r\n};\r\nconst bindec = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let text = \"0b\" + num1.toString(2);\r\n  let val = num1;\r\n  return { val, text };\r\n};\r\nconst hexdec = max => {\r\n  let num1 = randomNumber(2, max);\r\n  let text = \"0x\" + num1.toString(16);\r\n  let val = num1;\r\n  return { val, text };\r\n};\r\n\r\nconst algo = {\r\n  square,\r\n  cube,\r\n  eins,\r\n  bindec,\r\n  hexdec,\r\n  sqroot\r\n};\r\n\r\nexport { shuffle, randomNumber, algo };\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport Gamesize from \"./components/Gamesize\";\nimport Header from \"./components/Header\";\nimport Gametype from \"./components/Gametype\";\nimport { shuffle, algo } from \"./helpers\";\n\nclass App extends Component {\n  state = {\n    cards: [],\n    firstClicked: { id: null, text: null, val: null },\n    secondClicked: { id: null, text: null, val: null },\n    cnt: 0,\n    gameSize: 4,\n    algo: algo.bindec\n  };\n\n  initCards = () => {\n    // set game size\n    // create 8 cards with different textor\n    let cards = Array((this.state.gameSize * this.state.gameSize) / 2)\n      .fill()\n      .map(el => {\n        return this.state.algo(32);\n      });\n    // duplicate cards\n    let cardsFlipped = [...cards];\n\n    // flip text\n    cardsFlipped = cardsFlipped.map(el => ({\n      val: el.text,\n      text: el.val\n    }));\n    // combine 2 card sets\n    cards = [...cards, ...cardsFlipped];\n    // shuffle Cards\n    shuffle(cards);\n    // set unique index for react\n    cards = cards.map((el, index) => ({\n      val: el.val,\n      text: el.text,\n      id: index\n    }));\n    // console.log(cards);\n\n    this.setState({ cards });\n  };\n\n  isEqual = () => {\n    return (\n      this.state.firstClicked.id !== this.state.secondClicked.id &&\n      (this.state.firstClicked.text === this.state.secondClicked.val ||\n        this.state.firstClicked.val === this.state.secondClicked.text)\n    );\n  };\n\n  // if cards have same text set card bgtext to wrapper bgtext => card 'invisible'\n  removeCard = () => {\n    let newCards = [...this.state.cards];\n    if (this.isEqual()) {\n      // console.log(\"same textors!\");\n      newCards[this.state.firstClicked.id].text = \"\";\n      newCards[this.state.secondClicked.id].text = \"\";\n      this.setState({\n        cards: newCards,\n        secondClicked: { id: null, text: null, val: null }\n      });\n    }\n  };\n\n  //picks a card and evaluates: 'removes' if eq text\n  evalCards = card => {\n    if (this.state.cnt % 2 === 0) {\n      this.setState(\n        { firstClicked: card, cnt: this.state.cnt + 1 },\n        this.removeCard\n      );\n    } else {\n      this.setState(\n        { secondClicked: card, cnt: this.state.cnt + 1 },\n        this.removeCard\n      );\n    }\n  };\n\n  setSize = size => {\n    // console.log(size);\n    // reset state\n    this.setState(\n      {\n        cards: [],\n        firstClicked: { id: null, text: null },\n        secondClicked: { id: null, text: null },\n        cnt: 0,\n        gameSize: size\n      },\n      this.initCards\n    );\n  };\n\n  setAlgo = algoStr => {\n    // console.log(algoStr);\n    // reset state\n    this.setState(\n      {\n        cards: [],\n        firstClicked: { id: null, text: null },\n        secondClicked: { id: null, text: null },\n        cnt: 0,\n        algo: algo[algoStr]\n      },\n      this.initCards\n    );\n  };\n\n  componentDidMount() {\n    this.initCards();\n  }\n  render() {\n    return (\n      <div className=\"\">\n        <Header />\n        <Main\n          cards={this.state.cards}\n          evalCards={this.evalCards}\n          size={this.state.gameSize}\n        />\n        <Gamesize setSize={this.setSize} />\n        <Gametype setAlgo={this.setAlgo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}